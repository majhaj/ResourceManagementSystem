@page "/register"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Register</h3>

<EditForm Model="@registerModel" OnValidSubmit="HandleRegister" FormName="RegisterForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-2">
        <label for="username">Full Name</label>
        <InputText id="username" class="form-control" @bind-Value="registerModel.Username" />
        <ValidationMessage For="@(() => registerModel.Username)" />
    </div>

    <div class="mb-2">
        <label for="email">Email</label>
        <InputText id="email" type="email" class="form-control" @bind-Value="registerModel.Email" />
        <ValidationMessage For="@(() => registerModel.Email)" />
    </div>

    <div class="mb-2">
        <label for="password">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="registerModel.Password" />
        <ValidationMessage For="@(() => registerModel.Password)" />
    </div>

    <button class="btn btn-primary mt-2">Register</button>
</EditForm>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger mt-2">@ErrorMessage</div>
}

@code {
    private UserRegister registerModel = new();
    private string ErrorMessage = string.Empty;

    private async Task HandleRegister()
    {
        ErrorMessage = string.Empty;

        try
        {
            // MAPOWANIE UserRegister → RegisterRequest (anonimowo lub przez lokalną klasę DTO)
            var request = new
            {
                Username = registerModel.Username,
                Email = registerModel.Email,
                Password = registerModel.Password
            };

            var response = await Http.PostAsJsonAsync("api/auth/register", request);

            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/login");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ErrorMessage = $"Registration failed: {error}";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Unexpected error: {ex.Message}";
        }
    }
}
